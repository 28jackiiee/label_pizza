============================= test session starts ==============================
platform linux -- Python 3.10.16, pytest-8.3.5, pluggy-1.6.0 -- /home/zhiqiul/miniconda3/envs/label_pizza/bin/python
cachedir: .pytest_cache
rootdir: /data3/zhiqiul/label_pizza
configfile: pyproject.toml
plugins: anyio-4.9.0, mock-3.14.1
collecting ... collected 80 items

tests/test_services.py::test_video_service_get_all_videos PASSED
tests/test_services.py::test_video_service_get_all_videos_with_project PASSED
tests/test_services.py::test_video_service_get_all_videos_with_ground_truth PASSED
tests/test_services.py::test_video_service_get_all_videos_multiple_projects PASSED
tests/test_services.py::test_video_service_get_all_videos_mixed_status PASSED
tests/test_services.py::test_video_service_add_video PASSED
tests/test_services.py::test_video_service_add_video_duplicate PASSED
tests/test_services.py::test_video_service_add_video_invalid_url PASSED
tests/test_services.py::test_video_service_add_video_special_chars PASSED
tests/test_services.py::test_video_service_add_video_query_params PASSED
tests/test_services.py::test_video_service_get_all_videos_empty PASSED
tests/test_services.py::test_video_service_get_all_videos_with_metadata PASSED
tests/test_services.py::test_video_service_get_all_videos_with_partial_ground_truth PASSED
tests/test_services.py::test_video_service_add_video_with_metadata PASSED
tests/test_services.py::test_video_service_add_video_with_empty_metadata FAILED
tests/test_services.py::test_video_service_add_video_with_invalid_metadata FAILED
tests/test_services.py::test_video_service_add_video_with_very_long_url PASSED
tests/test_services.py::test_video_service_add_video_with_invalid_protocol PASSED
tests/test_services.py::test_video_service_add_video_with_missing_extension PASSED
tests/test_services.py::test_project_service_get_all_projects PASSED
tests/test_services.py::test_project_service_create_project PASSED
tests/test_services.py::test_project_service_archive_project PASSED
tests/test_services.py::test_project_service_archive_nonexistent_project PASSED
tests/test_services.py::test_project_service_progress_empty PASSED
tests/test_services.py::test_project_service_progress_with_data PASSED
tests/test_services.py::test_project_service_progress_nonexistent_project PASSED
tests/test_services.py::test_create_project_with_archived_resources_fails PASSED
tests/test_services.py::test_duplicate_project_video_fail PASSED
tests/test_services.py::test_archived_project_hidden_and_read_only PASSED
tests/test_services.py::test_schema_service_get_all_schemas PASSED
tests/test_services.py::test_schema_service_get_schema_questions PASSED
tests/test_services.py::test_schema_service_create_schema PASSED
tests/test_services.py::test_schema_service_add_question_to_schema PASSED
tests/test_services.py::test_schema_service_remove_question_from_schema PASSED
tests/test_services.py::test_schema_service_archive_unarchive PASSED
tests/test_services.py::test_schema_service_get_schema_id_by_name PASSED
tests/test_services.py::test_question_service_get_all_questions PASSED
tests/test_services.py::test_question_service_add_question PASSED
tests/test_services.py::test_question_service_archive_question PASSED
tests/test_services.py::test_question_service_unarchive_question PASSED
tests/test_services.py::test_question_group_service_get_all_groups PASSED
tests/test_services.py::test_question_group_service_create_group PASSED
tests/test_services.py::test_question_group_service_archive_group PASSED
tests/test_services.py::test_question_group_service_unarchive_group PASSED
tests/test_services.py::test_question_group_service_get_group_questions PASSED
tests/test_services.py::test_question_group_service_get_group_details PASSED
tests/test_services.py::test_auth_service_authenticate PASSED
tests/test_services.py::test_auth_service_seed_admin PASSED
tests/test_services.py::test_auth_service_get_all_users PASSED
tests/test_services.py::test_auth_service_update_user_role PASSED
tests/test_services.py::test_auth_service_toggle_user_active PASSED
tests/test_services.py::test_auth_service_get_project_assignments PASSED
tests/test_services.py::test_auth_service_assign_user_to_project PASSED
tests/test_services.py::test_auth_service_remove_user_from_project PASSED
tests/test_services.py::test_auth_service_invalid_operations PASSED
tests/test_services.py::test_auth_service_create_user PASSED
tests/test_services.py::test_auth_service_create_user_duplicate PASSED
tests/test_services.py::test_auth_service_create_user_invalid_type PASSED
tests/test_services.py::test_auth_service_admin_auto_reviewer PASSED
tests/test_services.py::test_auth_service_bulk_assignments PASSED
tests/test_services.py::test_question_group_reusable_validation PASSED
tests/test_services.py::test_question_group_title_uniqueness PASSED
tests/test_services.py::test_question_service_add_question_invalid_default PASSED
tests/test_services.py::test_question_group_service_get_nonexistent_group PASSED
tests/test_services.py::test_schema_service_get_nonexistent_schema PASSED
tests/test_services.py::test_question_service_archive_nonexistent_question PASSED
tests/test_services.py::test_question_group_service_archive_nonexistent_group PASSED
tests/test_services.py::test_cannot_add_archived_video_to_project PASSED
tests/test_services.py::test_video_metadata_validation FAILED
tests/test_services.py::test_video_uid_special_chars PASSED
tests/test_services.py::test_video_uid_case_sensitivity PASSED
tests/test_services.py::test_answer_service_submit_answer PASSED
tests/test_services.py::test_answer_service_submit_ground_truth PASSED
tests/test_services.py::test_answer_service_submit_invalid_option PASSED
tests/test_services.py::test_answer_service_submit_to_archived_project PASSED
tests/test_services.py::test_answer_service_submit_as_disabled_user PASSED
tests/test_services.py::test_answer_service_update_existing_answer PASSED
tests/test_services.py::test_answer_service_get_answers PASSED
tests/test_services.py::test_answer_service_get_ground_truth PASSED
tests/test_services.py::test_question_text_uniqueness PASSED

=================================== FAILURES ===================================
_______________ test_video_service_add_video_with_empty_metadata _______________

session = <sqlalchemy.orm.session.Session object at 0x7f5d6fa2e8f0>

    def test_video_service_add_video_with_empty_metadata(session):
        """Test adding a video with empty metadata"""
>       VideoService.add_video("http://example.com/new_video.mp4", session, {})

tests/test_services.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

url = 'http://example.com/new_video.mp4'
session = <sqlalchemy.orm.session.Session object at 0x7f5d6fa2e8f0>
metadata = {}

    @staticmethod
    def add_video(url: str, session: Session, metadata: dict = None) -> None:
        """Add a new video to the database.
    
        Args:
            url: The URL of the video
            session: Database session
            metadata: Optional dictionary containing video metadata
        """
        if not url.startswith(("http://", "https://")):
            raise ValueError("URL must start with http:// or https://")
    
        # Extract filename and check for extension
        filename = url.split("/")[-1]
        if not filename or "." not in filename:
            raise ValueError("URL must end with a filename with extension")
    
        if len(url) > 180:
            raise ValueError("URL is too long (max 180 characters)")
    
        # Validate metadata type - must be None or a dictionary
        if metadata is not None:
            if not isinstance(metadata, dict) or not metadata:
>               raise ValueError("Metadata must be a non-empty dictionary")
E               ValueError: Metadata must be a non-empty dictionary

label_pizza/services.py:139: ValueError
______________ test_video_service_add_video_with_invalid_metadata ______________

session = <sqlalchemy.orm.session.Session object at 0x7f5d6fa2c490>

    def test_video_service_add_video_with_invalid_metadata(session):
        """Test adding a video with invalid metadata type"""
        with pytest.raises(ValueError, match="must be a dictionary"):
>           VideoService.add_video("http://example.com/new_video.mp4", session, "invalid_metadata")

tests/test_services.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

url = 'http://example.com/new_video.mp4'
session = <sqlalchemy.orm.session.Session object at 0x7f5d6fa2c490>
metadata = 'invalid_metadata'

    @staticmethod
    def add_video(url: str, session: Session, metadata: dict = None) -> None:
        """Add a new video to the database.
    
        Args:
            url: The URL of the video
            session: Database session
            metadata: Optional dictionary containing video metadata
        """
        if not url.startswith(("http://", "https://")):
            raise ValueError("URL must start with http:// or https://")
    
        # Extract filename and check for extension
        filename = url.split("/")[-1]
        if not filename or "." not in filename:
            raise ValueError("URL must end with a filename with extension")
    
        if len(url) > 180:
            raise ValueError("URL is too long (max 180 characters)")
    
        # Validate metadata type - must be None or a dictionary
        if metadata is not None:
            if not isinstance(metadata, dict) or not metadata:
>               raise ValueError("Metadata must be a non-empty dictionary")
E               ValueError: Metadata must be a non-empty dictionary

label_pizza/services.py:139: ValueError

During handling of the above exception, another exception occurred:

session = <sqlalchemy.orm.session.Session object at 0x7f5d6fa2c490>

    def test_video_service_add_video_with_invalid_metadata(session):
        """Test adding a video with invalid metadata type"""
>       with pytest.raises(ValueError, match="must be a dictionary"):
E       AssertionError: Regex pattern did not match.
E        Regex: 'must be a dictionary'
E        Input: 'Metadata must be a non-empty dictionary'

tests/test_services.py:365: AssertionError
________________________ test_video_metadata_validation ________________________

session = <sqlalchemy.orm.session.Session object at 0x7f5d6f315ff0>

    def test_video_metadata_validation(session):
        """Test validation of video metadata."""
        # Test invalid metadata types
        invalid_metadatas = [
            "not a dict",
            123,
            [1, 2, 3],
            {}  # Empty dict instead of None
        ]
    
        for metadata in invalid_metadatas:
            with pytest.raises(ValueError, match="Metadata must be a non-empty dictionary"):
                VideoService.add_video("http://example.com/test.mp4", session, metadata)
    
        # Test metadata with invalid value types
        invalid_value_metadata = {
            "duration": "not a number",
            "resolution": 1080,  # Should be string
            "tags": "not a list"  # Should be list
        }
    
>       with pytest.raises(ValueError, match="Invalid metadata value type"):
E       Failed: DID NOT RAISE <class 'ValueError'>

tests/test_services.py:1009: Failed
=========================== short test summary info ============================
FAILED tests/test_services.py::test_video_service_add_video_with_empty_metadata
FAILED tests/test_services.py::test_video_service_add_video_with_invalid_metadata
FAILED tests/test_services.py::test_video_metadata_validation - Failed: DID N...
=================== 3 failed, 77 passed in 302.79s (0:05:02) ===================
