============================= test session starts ==============================
platform linux -- Python 3.10.16, pytest-8.3.5, pluggy-1.6.0 -- /home/zhiqiul/miniconda3/envs/label_pizza/bin/python
cachedir: .pytest_cache
rootdir: /data3/zhiqiul/label_pizza
configfile: pyproject.toml
plugins: anyio-4.9.0, mock-3.14.1
collecting ... collected 79 items

tests/test_services.py::test_video_service_get_all_videos PASSED
tests/test_services.py::test_video_service_get_all_videos_with_project PASSED
tests/test_services.py::test_video_service_get_all_videos_with_ground_truth PASSED
tests/test_services.py::test_video_service_get_all_videos_multiple_projects PASSED
tests/test_services.py::test_video_service_get_all_videos_mixed_status PASSED
tests/test_services.py::test_video_service_add_video PASSED
tests/test_services.py::test_video_service_add_video_duplicate PASSED
tests/test_services.py::test_video_service_add_video_invalid_url PASSED
tests/test_services.py::test_video_service_add_video_special_chars PASSED
tests/test_services.py::test_video_service_add_video_query_params PASSED
tests/test_services.py::test_video_service_get_all_videos_empty PASSED
tests/test_services.py::test_video_service_get_all_videos_with_metadata PASSED
tests/test_services.py::test_video_service_get_all_videos_with_partial_ground_truth PASSED
tests/test_services.py::test_video_service_add_video_with_metadata PASSED
tests/test_services.py::test_video_service_add_video_with_empty_metadata PASSED
tests/test_services.py::test_video_service_add_video_with_invalid_metadata PASSED
tests/test_services.py::test_video_service_add_video_with_very_long_url PASSED
tests/test_services.py::test_video_service_add_video_with_invalid_protocol PASSED
tests/test_services.py::test_video_service_add_video_with_missing_extension PASSED
tests/test_services.py::test_project_service_get_all_projects PASSED
tests/test_services.py::test_project_service_create_project PASSED
tests/test_services.py::test_project_service_archive_project PASSED
tests/test_services.py::test_project_service_archive_nonexistent_project PASSED
tests/test_services.py::test_project_service_progress_empty PASSED
tests/test_services.py::test_project_service_progress_with_data PASSED
tests/test_services.py::test_project_service_progress_nonexistent_project PASSED
tests/test_services.py::test_create_project_with_archived_resources_fails PASSED
tests/test_services.py::test_duplicate_project_video_fail PASSED
tests/test_services.py::test_archived_project_hidden_and_read_only PASSED
tests/test_services.py::test_schema_service_get_all_schemas PASSED
tests/test_services.py::test_schema_service_get_schema_questions PASSED
tests/test_services.py::test_schema_service_create_schema PASSED
tests/test_services.py::test_schema_service_add_question_to_schema PASSED
tests/test_services.py::test_schema_service_remove_question_from_schema PASSED
tests/test_services.py::test_schema_service_archive_unarchive PASSED
tests/test_services.py::test_schema_service_get_schema_id_by_name PASSED
tests/test_services.py::test_question_service_get_all_questions PASSED
tests/test_services.py::test_question_service_add_question PASSED
tests/test_services.py::test_question_service_archive_question PASSED
tests/test_services.py::test_question_service_unarchive_question PASSED
tests/test_services.py::test_question_group_service_get_all_groups PASSED
tests/test_services.py::test_question_group_service_create_group PASSED
tests/test_services.py::test_question_group_service_archive_group PASSED
tests/test_services.py::test_question_group_service_unarchive_group PASSED
tests/test_services.py::test_question_group_service_get_group_questions PASSED
tests/test_services.py::test_question_group_service_get_group_details PASSED
tests/test_services.py::test_auth_service_authenticate PASSED
tests/test_services.py::test_auth_service_seed_admin PASSED
tests/test_services.py::test_auth_service_get_all_users PASSED
tests/test_services.py::test_auth_service_update_user_role PASSED
tests/test_services.py::test_auth_service_toggle_user_active PASSED
tests/test_services.py::test_auth_service_get_project_assignments PASSED
tests/test_services.py::test_auth_service_assign_user_to_project PASSED
tests/test_services.py::test_auth_service_remove_user_from_project PASSED
tests/test_services.py::test_auth_service_invalid_operations PASSED
tests/test_services.py::test_auth_service_create_user PASSED
tests/test_services.py::test_auth_service_create_user_duplicate PASSED
tests/test_services.py::test_auth_service_create_user_invalid_type PASSED
tests/test_services.py::test_auth_service_admin_auto_reviewer PASSED
tests/test_services.py::test_auth_service_bulk_assignments PASSED
tests/test_services.py::test_question_group_reusable_validation PASSED
tests/test_services.py::test_question_group_title_uniqueness PASSED
tests/test_services.py::test_question_service_add_question_invalid_default PASSED
tests/test_services.py::test_question_group_service_get_nonexistent_group PASSED
tests/test_services.py::test_schema_service_get_nonexistent_schema PASSED
tests/test_services.py::test_question_service_archive_nonexistent_question PASSED
tests/test_services.py::test_question_group_service_archive_nonexistent_group PASSED
tests/test_services.py::test_cannot_add_archived_video_to_project PASSED
tests/test_services.py::test_video_metadata_validation FAILED
tests/test_services.py::test_video_uid_special_chars FAILED
tests/test_services.py::test_video_uid_case_sensitivity PASSED
tests/test_services.py::test_answer_service_submit_answer PASSED
tests/test_services.py::test_answer_service_submit_ground_truth PASSED
tests/test_services.py::test_answer_service_submit_invalid_option PASSED
tests/test_services.py::test_answer_service_submit_to_archived_project PASSED
tests/test_services.py::test_answer_service_submit_as_disabled_user PASSED
tests/test_services.py::test_answer_service_update_existing_answer PASSED
tests/test_services.py::test_answer_service_get_answers FAILED
tests/test_services.py::test_answer_service_get_ground_truth FAILED

=================================== FAILURES ===================================
________________________ test_video_metadata_validation ________________________

session = <sqlalchemy.orm.session.Session object at 0x7fb72554f820>

    def test_video_metadata_validation(session):
        """Test validation of video metadata."""
        # Test invalid metadata types
        invalid_metadatas = [
            "not a dict",
            123,
            [1, 2, 3],
            None
        ]
    
        for metadata in invalid_metadatas:
>           with pytest.raises(ValueError, match="must be a dictionary"):
E           Failed: DID NOT RAISE <class 'ValueError'>

tests/test_services.py:999: Failed
_________________________ test_video_uid_special_chars _________________________

session = <sqlalchemy.orm.session.Session object at 0x7fb7254729e0>

    def test_video_uid_special_chars(session):
        """Test handling of special characters in video UIDs."""
        # Test various special characters in video UIDs
        special_chars = [
            "test video with spaces.mp4",
            "test-video-with-dashes.mp4",
            "test.video.with.dots.mp4",
            "test_video_with_underscores.mp4",
            "test@video.mp4",
            "test#video.mp4",
            "test$video.mp4",
            "test%video.mp4",
            "test&video.mp4",
            "test*video.mp4",
            "test+video.mp4",
            "test=video.mp4",
            "test[video].mp4",
            "test{video}.mp4",
            "test(video).mp4",
            "test<video>.mp4",
            "test>video.mp4",
            "test|video.mp4",
            "test\\video.mp4",
            "test/video.mp4",
            "test:video.mp4",
            "test;video.mp4",
            "test'video.mp4",
            "test\"video.mp4",
            "test`video.mp4",
            "test~video.mp4",
            "test!video.mp4",
            "test?video.mp4",
            "test,video.mp4"
        ]
    
        for uid in special_chars:
            url = f"http://example.com/{uid}"
            try:
                # Add video
                VideoService.add_video(url, session)
    
                # Verify video was added
                video = session.query(Video).filter_by(video_uid=uid).first()
>               assert video is not None, f"Failed to find video with UID: {uid}"
E               AssertionError: Failed to find video with UID: test/video.mp4
E               assert None is not None

tests/test_services.py:1067: AssertionError

During handling of the above exception, another exception occurred:

session = <sqlalchemy.orm.session.Session object at 0x7fb7254729e0>

    def test_video_uid_special_chars(session):
        """Test handling of special characters in video UIDs."""
        # Test various special characters in video UIDs
        special_chars = [
            "test video with spaces.mp4",
            "test-video-with-dashes.mp4",
            "test.video.with.dots.mp4",
            "test_video_with_underscores.mp4",
            "test@video.mp4",
            "test#video.mp4",
            "test$video.mp4",
            "test%video.mp4",
            "test&video.mp4",
            "test*video.mp4",
            "test+video.mp4",
            "test=video.mp4",
            "test[video].mp4",
            "test{video}.mp4",
            "test(video).mp4",
            "test<video>.mp4",
            "test>video.mp4",
            "test|video.mp4",
            "test\\video.mp4",
            "test/video.mp4",
            "test:video.mp4",
            "test;video.mp4",
            "test'video.mp4",
            "test\"video.mp4",
            "test`video.mp4",
            "test~video.mp4",
            "test!video.mp4",
            "test?video.mp4",
            "test,video.mp4"
        ]
    
        for uid in special_chars:
            url = f"http://example.com/{uid}"
            try:
                # Add video
                VideoService.add_video(url, session)
    
                # Verify video was added
                video = session.query(Video).filter_by(video_uid=uid).first()
                assert video is not None, f"Failed to find video with UID: {uid}"
                assert video.url == url, f"URL mismatch for UID: {uid}"
    
                # Clean up
                session.delete(video)
                session.commit()
            except Exception as e:
>               pytest.fail(f"Failed to handle special character in UID '{uid}': {str(e)}")
E               Failed: Failed to handle special character in UID 'test/video.mp4': Failed to find video with UID: test/video.mp4
E               assert None is not None

tests/test_services.py:1074: Failed
_______________________ test_answer_service_get_answers ________________________

self = Index(['Question ID', 'User ID', 'Answer Value', 'Is Ground Truth',
       'Created At', 'Modified By User ID'],
      dtype='object')
key = 'question_id'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)

/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   KeyError: 'question_id'

pandas/_libs/hashtable_class_helper.pxi:7089: KeyError

The above exception was the direct cause of the following exception:

session = <sqlalchemy.orm.session.Session object at 0x7fb7252da8f0>

    def test_answer_service_get_answers(session):
        """Test retrieving answers for a video in a project."""
        # Create test data
        user = User(user_id_str="test_user", email="test@example.com", password_hash="dummy_hash")
        session.add(user)
        session.commit()
    
        video = Video(video_uid="test_video.mp4", url="http://example.com/test_video.mp4")
        session.add(video)
        session.commit()
    
        # Create schema first
        schema = Schema(name="test_schema", rules_json={})
        session.add(schema)
        session.commit()
    
        project = Project(name="Test Project", schema_id=schema.id)
        session.add(project)
        session.commit()
    
        question1 = Question(
            text="Question 1?",
            type="single",
            options=["option1", "option2"]
        )
        question2 = Question(
            text="Question 2?",
            type="single",
            options=["option1", "option2"]
        )
        session.add_all([question1, question2])
        session.commit()
    
        # Add questions to schema
        schema_question1 = SchemaQuestion(schema_id=schema.id, question_id=question1.id)
        schema_question2 = SchemaQuestion(schema_id=schema.id, question_id=question2.id)
        session.add_all([schema_question1, schema_question2])
        session.commit()
    
        # Submit answers
        AnswerService.submit_answer(
            video_id=video.id,
            question_id=question1.id,
            project_id=project.id,
            user_id=user.id,
            answer_value="option1",
            session=session
        )
        AnswerService.submit_answer(
            video_id=video.id,
            question_id=question2.id,
            project_id=project.id,
            user_id=user.id,
            answer_value="option2",
            session=session
        )
    
        # Get answers
        answers_df = AnswerService.get_answers(video.id, project.id, session)
    
        # Verify answers
        assert len(answers_df) == 2
>       assert answers_df.iloc[0]["question_id"] == question1.id

tests/test_services.py:1490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/series.py:1121: in __getitem__
    return self._get_value(key)
/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/series.py:1237: in _get_value
    loc = self.index.get_loc(label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['Question ID', 'User ID', 'Answer Value', 'Is Ground Truth',
       'Created At', 'Modified By User ID'],
      dtype='object')
key = 'question_id'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'question_id'

/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812: KeyError
_____________________ test_answer_service_get_ground_truth _____________________

self = Index(['Question ID', 'Answer Value', 'Created At', 'Modified By User ID'], dtype='object')
key = 'question_id'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)

/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   KeyError: 'question_id'

pandas/_libs/hashtable_class_helper.pxi:7089: KeyError

The above exception was the direct cause of the following exception:

session = <sqlalchemy.orm.session.Session object at 0x7fb7254fbac0>

    def test_answer_service_get_ground_truth(session):
        """Test retrieving ground truth answers for a video in a project."""
        # Create test data
        user = User(user_id_str="test_user", email="test@example.com", password_hash="dummy_hash")
        session.add(user)
        session.commit()
    
        video = Video(video_uid="test_video.mp4", url="http://example.com/test_video.mp4")
        session.add(video)
        session.commit()
    
        # Create schema first
        schema = Schema(name="test_schema", rules_json={})
        session.add(schema)
        session.commit()
    
        project = Project(name="Test Project", schema_id=schema.id)
        session.add(project)
        session.commit()
    
        question = Question(
            text="Test question?",
            type="single",
            options=["option1", "option2"]
        )
        session.add(question)
        session.commit()
    
        # Add question to schema
        schema_question = SchemaQuestion(schema_id=schema.id, question_id=question.id)
        session.add(schema_question)
        session.commit()
    
        # Submit ground truth answer
        AnswerService.submit_answer(
            video_id=video.id,
            question_id=question.id,
            project_id=project.id,
            user_id=user.id,
            answer_value="option1",
            session=session,
            is_ground_truth=True
        )
    
        # Get ground truth answers
        ground_truth_df = AnswerService.get_ground_truth(video.id, project.id, session)
    
        # Verify ground truth answer
        assert len(ground_truth_df) == 1
>       assert ground_truth_df.iloc[0]["question_id"] == question.id

tests/test_services.py:1544: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/series.py:1121: in __getitem__
    return self._get_value(key)
/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/series.py:1237: in _get_value
    loc = self.index.get_loc(label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['Question ID', 'Answer Value', 'Created At', 'Modified By User ID'], dtype='object')
key = 'question_id'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'question_id'

/home/zhiqiul/miniconda3/envs/label_pizza/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812: KeyError
=========================== short test summary info ============================
FAILED tests/test_services.py::test_video_metadata_validation - Failed: DID N...
FAILED tests/test_services.py::test_video_uid_special_chars - Failed: Failed ...
FAILED tests/test_services.py::test_answer_service_get_answers - KeyError: 'q...
FAILED tests/test_services.py::test_answer_service_get_ground_truth - KeyErro...
=================== 4 failed, 75 passed in 255.89s (0:04:15) ===================
